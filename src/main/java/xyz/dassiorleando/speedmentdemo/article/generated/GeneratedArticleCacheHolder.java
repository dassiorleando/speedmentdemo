package xyz.dassiorleando.speedmentdemo.article.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.trait.HasIdentifier;
import xyz.dassiorleando.speedmentdemo.article.Article;
import xyz.dassiorleando.speedmentdemo.article.ArticleEntityStoreSerializerImpl;
import xyz.dassiorleando.speedmentdemo.article.ArticleManager;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * ArticleManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedArticleCacheHolder implements EntityStoreHolder<Article> {
    
    private final EntityStore<Article> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldTitleCache;
    private final OfString fieldContentCache;
    private final OfComparable<LocalDateTime> fieldPublishedDateCache;
    
    public GeneratedArticleCacheHolder(
            EntityStore<Article> entityStore,
            OfInt fieldIdCache,
            OfString fieldTitleCache,
            OfString fieldContentCache,
            OfComparable<LocalDateTime> fieldPublishedDateCache) {
        
        this.entityStore             = requireNonNull(entityStore);
        this.fieldIdCache            = requireNonNull(fieldIdCache);
        this.fieldTitleCache         = requireNonNull(fieldTitleCache);
        this.fieldContentCache       = requireNonNull(fieldContentCache);
        this.fieldPublishedDateCache = requireNonNull(fieldPublishedDateCache);
    }
    
    @Override
    public EntityStore<Article> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Article> columnId) {
        if (columnId instanceof Article.Identifier) {
            final Article.Identifier _id = (Article.Identifier) columnId;
            switch (_id) {
                case ID             : return (CACHE) fieldIdCache;
                case TITLE          : return (CACHE) fieldTitleCache;
                case CONTENT        : return (CACHE) fieldContentCache;
                case PUBLISHED_DATE : return (CACHE) fieldPublishedDateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "id"             : return (CACHE) fieldIdCache;
                case "title"          : return (CACHE) fieldTitleCache;
                case "content"        : return (CACHE) fieldContentCache;
                case "published_date" : return (CACHE) fieldPublishedDateCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Article> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedArticleCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            ArticleEntityStoreSerializerImpl::new,
            TableIdentifier.of("speedmentdemo", "speedmentdemo", "xyz/dassiorleando/speedmentdemo/article")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Article> recycleAndPersist(PersistOperation<Article> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Article> recycleAndRemove(RemoveOperation<Article> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Article> recycleAndUpdate(UpdateOperation<Article> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Article> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Article>, FieldCache<?>>>of(
            Tuples.of(Article.ID,            fieldIdCache),
            Tuples.of(Article.TITLE,         fieldTitleCache),
            Tuples.of(Article.CONTENT,       fieldContentCache),
            Tuples.of(Article.PUBLISHED_DATE,fieldPublishedDateCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Article>> columnIdentifiers = Stream.<HasIdentifier<Article>>of(
            Article.ID,
            Article.TITLE,
            Article.CONTENT,
            Article.PUBLISHED_DATE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedArticleCacheHolder> reload(CompletableFuture<EntityStore<Article>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Article.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldTitleCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Article.TITLE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldContentCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Article.CONTENT, 0);
        
        final CompletableFuture<FieldCache.OfComparable<LocalDateTime>> fieldPublishedDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Article.PUBLISHED_DATE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedArticleCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldTitleCacheFuture.get(),
                    fieldContentCacheFuture.get(),
                    fieldPublishedDateCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldTitleCache.close();
        fieldContentCache.close();
        fieldPublishedDateCache.close();
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Article.Identifier.ID,
            Article.Identifier.TITLE,
            Article.Identifier.CONTENT,
            Article.Identifier.PUBLISHED_DATE
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}