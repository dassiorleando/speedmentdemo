package xyz.dassiorleando.speedmentdemo.article.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;
import xyz.dassiorleando.speedmentdemo.article.Article;

import java.sql.Timestamp;
import java.time.LocalDateTime;

/**
 * The generated base for the {@link
 * xyz.dassiorleando.speedmentdemo.article.Article}-interface representing entities of the
 * {@code article}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedArticle {
    
    /**
     * This Field corresponds to the {@link Article} field that can be obtained
     * using the {@link Article#getId()} method.
     */
    IntField<Article, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        Article::getId,
        Article::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Article} field that can be obtained
     * using the {@link Article#getTitle()} method.
     */
    StringField<Article, String> TITLE = DatastoreFields.createStringField(
        Identifier.TITLE,
        Article::getTitle,
        Article::setTitle,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Article} field that can be obtained
     * using the {@link Article#getContent()} method.
     */
    StringField<Article, String> CONTENT = DatastoreFields.createStringField(
        Identifier.CONTENT,
        Article::getContent,
        Article::setContent,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Article} field that can be obtained
     * using the {@link Article#getPublishedDate()} method.
     */
    ComparableField<Article, Timestamp, LocalDateTime> PUBLISHED_DATE = DatastoreFields.createComparableField(
        Identifier.PUBLISHED_DATE,
        Article::getPublishedDate,
        Article::setPublishedDate,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    
    /**
     * Returns the id of this Article. The id field corresponds to the database
     * column speedmentdemo.speedmentdemo.article.id.
     * 
     * @return the id of this Article
     */
    int getId();
    
    /**
     * Returns the title of this Article. The title field corresponds to the
     * database column speedmentdemo.speedmentdemo.article.title.
     * 
     * @return the title of this Article
     */
    String getTitle();
    
    /**
     * Returns the content of this Article. The content field corresponds to the
     * database column speedmentdemo.speedmentdemo.article.content.
     * 
     * @return the content of this Article
     */
    String getContent();
    
    /**
     * Returns the publishedDate of this Article. The publishedDate field
     * corresponds to the database column
     * speedmentdemo.speedmentdemo.article.published_date.
     * 
     * @return the publishedDate of this Article
     */
    LocalDateTime getPublishedDate();
    
    /**
     * Sets the id of this Article. The id field corresponds to the database
     * column speedmentdemo.speedmentdemo.article.id.
     * 
     * @param id to set of this Article
     * @return   this Article instance
     */
    Article setId(int id);
    
    /**
     * Sets the title of this Article. The title field corresponds to the
     * database column speedmentdemo.speedmentdemo.article.title.
     * 
     * @param title to set of this Article
     * @return      this Article instance
     */
    Article setTitle(String title);
    
    /**
     * Sets the content of this Article. The content field corresponds to the
     * database column speedmentdemo.speedmentdemo.article.content.
     * 
     * @param content to set of this Article
     * @return        this Article instance
     */
    Article setContent(String content);
    
    /**
     * Sets the publishedDate of this Article. The publishedDate field
     * corresponds to the database column
     * speedmentdemo.speedmentdemo.article.published_date.
     * 
     * @param publishedDate to set of this Article
     * @return              this Article instance
     */
    Article setPublishedDate(LocalDateTime publishedDate);
    
    enum Identifier implements ColumnIdentifier<Article> {
        
        ID             ("id"),
        TITLE          ("title"),
        CONTENT        ("content"),
        PUBLISHED_DATE ("published_date");
        
        private final String columnId;
        private final TableIdentifier<Article> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "speedmentdemo";
        }
        
        @Override
        public String getSchemaId() {
            return "speedmentdemo";
        }
        
        @Override
        public String getTableId() {
            return "xyz/dassiorleando/speedmentdemo/article";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Article> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}