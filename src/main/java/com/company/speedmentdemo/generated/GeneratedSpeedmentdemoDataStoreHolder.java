package com.company.speedmentdemo.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.HasStatistics.Statistics;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.internal.util.StatisticsInternalUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import xyz.dassiorleando.speedmentdemo.article.Article;
import xyz.dassiorleando.speedmentdemo.article.generated.GeneratedArticleCacheHolder;

import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedSpeedmentdemoDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedArticleCacheHolder articleHolder;
    
    public GeneratedSpeedmentdemoDataStoreHolder(GeneratedArticleCacheHolder articleHolder) {
        this.articleHolder = requireNonNull(articleHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        return (EntityStore<ENTITY>) articleHolder.getEntityStore();
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return (CACHE) articleHolder.getFieldCache((ColumnIdentifier<Article>) columnId);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Map<String, Map<Statistics, ?>> getStatistics() {
        return StatisticsInternalUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            articleHolder
        );
    }
}